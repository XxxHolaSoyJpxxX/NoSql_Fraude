# core/usuario.py
from db.Dgraph.dgraph import obtener_cuentas_usuario
from db.Cassandra.cassandra import obtener_ultimas_transacciones_usuario, obtener_transacciones_cuenta, obtener_estadisticas_usuario
from db.MongoDB.mongo import guardar_reporte_fraude, guardar_notificacion, obtener_notificaciones, marcar_notificacion_leida
from core.fraude import SistemaDeteccionFraude

def menu_usuario(usuario_id):
    """
    Men√∫ principal del usuario enfocado en la detecci√≥n de fraude
    """
    while True:
        print(f"\n=== Men√∫ del Usuario: {usuario_id} ===")
        print("1. Ver historial de transacciones")
        print("2. Reportar transacci√≥n no reconocida")
        print("3. Ver alertas de seguridad")
        print("4. Ver nivel de riesgo de cuenta")
        print("5. Ver notificaciones")
        print("6. Salir")

        opcion = input("Selecciona una opci√≥n: ")

        if opcion == "1":
            ver_historial_transacciones(usuario_id)
        elif opcion == "2":
            reportar_fraude(usuario_id)
        elif opcion == "3":
            ver_alertas_seguridad(usuario_id)
        elif opcion == "4":
            ver_nivel_riesgo(usuario_id)
        elif opcion == "5":
            ver_notificaciones(usuario_id)
        elif opcion == "6":
            print("Saliendo del men√∫ de usuario.")
            break
        else:
            print("Opci√≥n no v√°lida.")

def ver_historial_transacciones(usuario_id):
    """
    Muestra el historial de transacciones del usuario para identificar posibles fraudes
    """
    print("\n=== Historial de Transacciones ===")
    
    # Obtener las cuentas del usuario
    cuentas = obtener_cuentas_usuario(usuario_id)
    
    if not cuentas:
        print("No tienes cuentas asociadas.")
        return
    
    # Mostrar transacciones recientes de todas las cuentas
    print("\nTransacciones recientes:")
    
    for cuenta in cuentas:
        account_id = cuenta.get('account_id')
        transacciones = obtener_transacciones_cuenta(account_id, 5)
        
        print(f"\nCuenta: {account_id}")
        if not transacciones:
            print("No hay transacciones recientes.")
            continue
        
        for t in transacciones:
            print(f"‚Ä¢ {t.get('fecha')} - {t.get('tipo')}: {t.get('monto')} - {t.get('estatus')}")
    
    input("\nPresiona Enter para volver al men√∫...")

def reportar_fraude(usuario_id):
    """
    Permite al usuario reportar una transacci√≥n fraudulenta
    """
    print("\n=== Reportar Transacci√≥n No Reconocida ===")
    
    # Obtener √∫ltimas transacciones del usuario
    transacciones = obtener_ultimas_transacciones_usuario(usuario_id, 20)
    
    if not transacciones:
        print("No hay transacciones recientes para reportar.")
        return
    
    print("\n√öltimas transacciones:")
    for i, t in enumerate(transacciones, 1):
        print(f"{i}. {t.get('fecha')} - {t.get('tipo')}: {t.get('monto')} - {t.get('estatus')}")
    
    try:
        idx = int(input("\nN√∫mero de transacci√≥n a reportar (0 para cancelar): ")) - 1
        
        if idx == -1:  # El usuario ingres√≥ 0
            print("Operaci√≥n cancelada.")
            return
        
        if not (0 <= idx < len(transacciones)):
            print("N√∫mero de transacci√≥n inv√°lido.")
            return
        
        transaccion = transacciones[idx]
        
        print(f"\nReportando transacci√≥n: {transaccion.get('transaction_id')}")
        print(f"Fecha: {transaccion.get('fecha')}")
        print(f"Monto: {transaccion.get('monto')}")
        print(f"Tipo: {transaccion.get('tipo')}")
        
        motivo = input("\nMotivo del reporte (no la reconozco, monto incorrecto, etc.): ")
        detalles = input("Detalles adicionales: ")
        
        # Crear reporte de fraude en MongoDB
        reporte = {
            "usuario_id": usuario_id,
            "transaction_id": transaccion.get('transaction_id'),
            "fecha_reporte": None,  # Se establece en el backend
            "motivo": motivo,
            "detalles": detalles,
            "estatus": None,  # Se establece en el backend
        }
        
        reporte_id = guardar_reporte_fraude(reporte)
        
        print(f"\n‚úÖ Reporte enviado exitosamente.")
        print(f"ID de reporte: {reporte_id}")
        print("Nuestro equipo revisar√° el caso y te contactar√° pr√≥ximamente.")
        
        # Crear notificaci√≥n para el usuario
        notificacion = {
            "tipo": "reporte_fraude",
            "titulo": "Reporte de fraude recibido",
            "mensaje": f"Hemos recibido tu reporte sobre la transacci√≥n del {transaccion.get('fecha')}. Te informaremos en cuanto tengamos novedades.",
            "prioridad": "alta"
        }
        
        guardar_notificacion(usuario_id, notificacion)
        
    except ValueError:
        print("Por favor ingresa un n√∫mero v√°lido.")
    except Exception as e:
        print(f"Error al reportar fraude: {str(e)}")
    
    input("\nPresiona Enter para volver al men√∫...")

def ver_alertas_seguridad(usuario_id):
    """
    Muestra las alertas de seguridad y posibles patrones sospechosos
    """
    print("\n=== Alertas de Seguridad ===")
    
    # Simulaci√≥n de an√°lisis de seguridad utilizando el sistema de detecci√≥n de fraude
    print("Analizando patrones de comportamiento y posibles amenazas...")
    
    # Obtener estad√≠sticas recientes
    try:
        estadisticas = obtener_estadisticas_usuario(usuario_id, 30)
        
        # Usar el sistema de detecci√≥n de fraude para analizar patrones
        # Esto es una simulaci√≥n simplificada
        resultado_analisis = {
            "nivel_riesgo": "bajo",
            "anomalias_detectadas": 0,
            "ubicaciones_inusuales": False,
            "patrones_sospechosos": False
        }
        
        print("\nResultados del an√°lisis de seguridad:")
        print(f"‚Ä¢ Nivel de riesgo actual: {resultado_analisis.get('nivel_riesgo').upper()}")
        print(f"‚Ä¢ Anomal√≠as detectadas: {resultado_analisis.get('anomalias_detectadas')}")
        
        if resultado_analisis.get('ubicaciones_inusuales'):
            print("‚ö†Ô∏è Se detectaron inicios de sesi√≥n desde ubicaciones inusuales.")
        else:
            print("‚úÖ No se detectaron inicios de sesi√≥n desde ubicaciones inusuales.")
        
        if resultado_analisis.get('patrones_sospechosos'):
            print("‚ö†Ô∏è Se detectaron patrones de transacci√≥n sospechosos.")
        else:
            print("‚úÖ No se detectaron patrones de transacci√≥n sospechosos.")
        
        print("\nRecomendaciones de seguridad:")
        print("‚Ä¢ Revisa regularmente tus transacciones")
        print("‚Ä¢ Activa notificaciones para todas las transacciones")
        print("‚Ä¢ No compartas tus credenciales con nadie")
        print("‚Ä¢ Actualiza tu contrase√±a regularmente")
        
    except Exception as e:
        print(f"Error al obtener an√°lisis de seguridad: {str(e)}")
    
    input("\nPresiona Enter para volver al men√∫...")

def ver_nivel_riesgo(usuario_id):
    """
    Muestra el nivel de riesgo de la cuenta y an√°lisis detallado
    """
    print("\n=== Nivel de Riesgo de Cuenta ===")
    
    # En un sistema real, esto consultar√≠a el nivel de riesgo calculado
    # por el sistema de detecci√≥n de fraude
    
    # Simulaci√≥n de niveles de riesgo
    factores_riesgo = [
        {"factor": "Ubicaci√≥n geogr√°fica", "nivel": "bajo", "score": 10},
        {"factor": "Patrones de actividad", "nivel": "medio", "score": 40},
        {"factor": "Frecuencia de transacciones", "nivel": "bajo", "score": 15},
        {"factor": "Montos de transacci√≥n", "nivel": "bajo", "score": 20}
    ]
    
    score_total = sum(f.get("score", 0) for f in factores_riesgo)
    nivel_riesgo = "bajo" if score_total < 50 else "medio" if score_total < 75 else "alto"
    
    print(f"\nPuntuaci√≥n de riesgo: {score_total}/100")
    print(f"Nivel de riesgo general: {nivel_riesgo.upper()}")
    
    print("\nFactores que contribuyen al nivel de riesgo:")
    for factor in factores_riesgo:
        print(f"‚Ä¢ {factor.get('factor')}: {factor.get('nivel').upper()} ({factor.get('score')} puntos)")
    
    print("\nRecomendaciones basadas en tu nivel de riesgo:")
    if nivel_riesgo == "bajo":
        print("‚úÖ Tu nivel de riesgo es bajo. Contin√∫a con tus pr√°cticas seguras.")
    elif nivel_riesgo == "medio":
        print("‚ö†Ô∏è Tu nivel de riesgo es medio. Considera revisar tus h√°bitos de transacci√≥n.")
    else:
        print("üö® Tu nivel de riesgo es alto. Se recomienda contactar a soporte.")
    
    input("\nPresiona Enter para volver al men√∫...")

def ver_notificaciones(usuario_id):
    """
    Muestra las notificaciones del usuario relacionadas con seguridad y fraude
    """
    print("\n=== Notificaciones ===")
    
    # Obtener notificaciones no le√≠das
    notificaciones = obtener_notificaciones(usuario_id, False)
    
    if not notificaciones:
        print("No tienes notificaciones nuevas.")
        
        # Preguntar si quiere ver notificaciones antiguas
        ver_antiguas = input("¬øDeseas ver notificaciones antiguas? (s/n): ").lower()
        if ver_antiguas == 's':
            notificaciones = obtener_notificaciones(usuario_id, True)
            if not notificaciones:
                print("No tienes notificaciones antiguas.")
                input("\nPresiona Enter para volver al men√∫...")
                return
        else:
            input("\nPresiona Enter para volver al men√∫...")
            return
    
    print(f"\nTienes {len(notificaciones)} notificaciones:")
    
    for i, n in enumerate(notificaciones, 1):
        leida = "üì≠" if n.get("leida") else "üì¨"
        print(f"{i}. {leida} {n.get('timestamp')} - {n.get('titulo')}")
    
    ver_detalle = input("\n¬øDeseas ver el detalle de alguna notificaci√≥n? (n√∫mero/n): ")
    
    if ver_detalle.lower() != 'n':
        try:
            idx = int(ver_detalle) - 1
            
            if 0 <= idx < len(notificaciones):
                n = notificaciones[idx]
                
                print(f"\nüì© {n.get('titulo')}")
                print(f"Fecha: {n.get('timestamp')}")
                print(f"Mensaje: {n.get('mensaje')}")
                
                if not n.get("leida"):
                    marcar_notificacion_leida(n.get("_id"))
                    print("Notificaci√≥n marcada como le√≠da.")
            else:
                print("N√∫mero de notificaci√≥n inv√°lido.")
                
        except ValueError:
            print("Por favor ingresa un n√∫mero v√°lido.")
    
    input("\nPresiona Enter para volver al men√∫...")
