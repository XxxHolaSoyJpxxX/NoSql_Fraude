# core/admin.py
from db.MongoDB.mongo import (
    obtener_usuarios_bajo_vigilancia, 
    agregar_usuario_vigilancia, 
    remover_usuario_vigilancia,
    registrar_accion_admin, 
    obtener_reportes_fraude,
    obtener_configuracion_reglas_fraude,
    actualizar_regla_fraude,
    agregar_regla_fraude,
    eliminar_regla_fraude,
    obtener_usuario
)
from db.Cassandra.cassandra import (
    obtener_alertas_fraude_usuario,
    actualizar_estatus_alerta,
    obtener_acciones_admin,
    obtener_estadisticas_usuario,
    crear_tablas
)
from db.Dgraph.dgraph import (
    obtener_usuarios,
    obtener_cuentas,
    obtener_transacciones
)
from core.fraude import SistemaDeteccionFraude
import os
import time
from datetime import datetime

def menu_admin():
    """
    Panel de administraci√≥n principal para el sistema de detecci√≥n de fraude
    """
    admin_id = None  # En un sistema real, se pasar√≠a como par√°metro
    
    while True:
        print("\n=== Panel de Administraci√≥n ===")
        print("1. Dashboard de monitoreo en tiempo real")
        print("2. Gesti√≥n de reglas de detecci√≥n de fraude")
        print("3. Sistema de casos de investigaci√≥n")
        print("4. Herramientas de an√°lisis de redes")
        print("5. Reportes y estad√≠sticas de fraude")
        print("6. Gesti√≥n de perfiles de riesgo")
        print("7. Listas de vigilancia")
        print("8. Alertas masivas")
        print("9. Auditor√≠a de acciones de administradores")
        print("10. Configuraci√≥n de umbrales de alerta")
        print("11. Simulaci√≥n de fraude")
        print("12. Gesti√≥n de bloqueos autom√°ticos")
        print("13. Aprobaci√≥n de transacciones de alto riesgo")
        print("14. Cumplimiento regulatorio")
        print("15. Identificaci√≥n de patrones emergentes")
        print("16. Visualizaci√≥n de anomal√≠as geogr√°ficas")
        print("17. Respuesta a incidentes de fraude")
        print("18. Verificaci√≥n de identidad")
        print("19. An√°lisis de comportamiento de administradores")
        print("20. Integraci√≥n con sistemas externos")
        print("21. Salir")

        opcion = input("Selecciona una opci√≥n: ")

        if opcion == "1":
            dashboard_monitoreo(admin_id)
        elif opcion == "2":
            gestion_reglas_fraude(admin_id)
        elif opcion == "3":
            casos_investigacion(admin_id)
        elif opcion == "4":
            analisis_redes(admin_id)
        elif opcion == "5":
            reportes_estadisticas(admin_id)
        elif opcion == "6":
            gestion_perfiles_riesgo(admin_id)
        elif opcion == "7":
            listas_vigilancia(admin_id)
        elif opcion == "8":
            alertas_masivas(admin_id)
        elif opcion == "9":
            auditoria_acciones(admin_id)
        elif opcion == "10":
            configuracion_umbrales(admin_id)
        elif opcion == "11":
            simulacion_fraude(admin_id)
        elif opcion == "12":
            gestion_bloqueos(admin_id)
        elif opcion == "13":
            aprobacion_transacciones(admin_id)
        elif opcion == "14":
            cumplimiento_regulatorio(admin_id)
        elif opcion == "15":
            identificacion_patrones(admin_id)
        elif opcion == "16":
            anomalias_geograficas(admin_id)
        elif opcion == "17":
            respuesta_incidentes(admin_id)
        elif opcion == "18":
            verificacion_identidad(admin_id)
        elif opcion == "19":
            analisis_administradores(admin_id)
        elif opcion == "20":
            integracion_sistemas_externos(admin_id)
        elif opcion == "21":
            break
        else:
            print("Opci√≥n no v√°lida.")

def dashboard_monitoreo(admin_id):
    """
    Dashboard para monitorear transacciones y alertas en tiempo real
    """
    print("\n=== Dashboard de Monitoreo en Tiempo Real ===")
    
    # Registro de actividad administrativa
    registrar_accion_admin(admin_id, "acceso_dashboard", {"seccion": "monitoreo"})
    
    # Obtener datos de las diferentes bases de datos
    try:
        # Transacciones recientes de Dgraph
        transacciones = obtener_transacciones()
        transacciones_recientes = transacciones.get('transacciones', [])[:5]
        
        # Alertas recientes de Cassandra (ejemplo con usuario random)
        alertas = obtener_alertas_fraude_usuario(None, 5)
        
        # Mostrar resumen
        print("\nüìä Resumen de actividad reciente:")
        print(f"‚Ä¢ Transacciones en las √∫ltimas 24h: {len(transacciones_recientes)}")
        print(f"‚Ä¢ Alertas de fraude activas: {len(alertas)}")
        
        # Mostrar transacciones recientes
        if transacciones_recientes:
            print("\nüîÑ √öltimas transacciones:")
            for t in transacciones_recientes:
                print(f"‚Ä¢ ID: {t.get('transaction_id')} - Monto: {t.get('amount')} - Estado: {t.get('transaction_status')}")
        
        # Mostrar alertas recientes
        if alertas:
            print("\n‚ö†Ô∏è Alertas recientes:")
            for a in alertas:
                print(f"‚Ä¢ {a.get('fecha')} - {a.get('tipo_alerta')} - Nivel: {a.get('nivel_riesgo')} - Estado: {a.get('estatus')}")
        
        input("\nPresiona Enter para volver al men√∫ principal...")
    
    except Exception as e:
        print(f"Error al cargar el dashboard: {str(e)}")
        input("Presiona Enter para volver al men√∫ principal...")

def gestion_reglas_fraude(admin_id):
    """
    Permite gestionar las reglas de detecci√≥n de fraude
    """
    print("\n=== Gesti√≥n de Reglas de Detecci√≥n de Fraude ===")
    print("[TODO] Implementaci√≥n simple de gesti√≥n de reglas de fraude")
    
    # Registrar acci√≥n administrativa
    registrar_accion_admin(admin_id, "acceso_reglas_fraude", {
        "detalles": "Acceso al m√≥dulo de gesti√≥n de reglas de fraude"
    })
    
    input("\nPresiona Enter para volver al men√∫ principal...")

def listas_vigilancia(admin_id):
    """
    Gestiona la lista de usuarios bajo vigilancia especial
    """
    print("\n=== Listas de Vigilancia ===")
    print("[TODO] Implementaci√≥n simple del sistema de listas de vigilancia")
    
    # Registrar acci√≥n administrativa
    registrar_accion_admin(admin_id, "acceso_vigilancia", {
        "detalles": "Acceso al m√≥dulo de listas de vigilancia"
    })
    
    input("\nPresiona Enter para volver al men√∫ principal...")

def auditoria_acciones(admin_id):
    """
    Muestra el registro de acciones realizadas por administradores
    """
    print("\n=== Auditor√≠a de Acciones de Administradores ===")
    print("[TODO] Implementaci√≥n simple de la auditor√≠a de acciones")
    
    # Registrar acci√≥n administrativa
    registrar_accion_admin(admin_id, "consulta_auditoria", {
        "detalles": "Consulta del registro de auditor√≠a"
    })
    
    input("\nPresiona Enter para volver al men√∫ principal...")

def casos_investigacion(admin_id):
    """
    Sistema de gesti√≥n de casos de investigaci√≥n de fraude
    """
    print("\n=== Sistema de Casos de Investigaci√≥n ===")
    print("[TODO] Implementaci√≥n simple del sistema de casos de investigaci√≥n")
    
    # Registrar acci√≥n administrativa
    registrar_accion_admin(admin_id, "acceso_casos", {
        "detalles": "Acceso al sistema de casos de investigaci√≥n"
    })
    
    input("\nPresiona Enter para volver al men√∫ principal...")

# Implementar el resto de las funciones del men√∫ de forma similar
# Estas son funciones dummy para completar el men√∫

def analisis_redes(admin_id):
    print("\n[TODO] An√°lisis de redes (Dgraph)")
    input("Presiona Enter para volver al men√∫ principal...")

def reportes_estadisticas(admin_id):
    print("\n[TODO] Reportes y estad√≠sticas de fraude")
    input("Presiona Enter para volver al men√∫ principal...")

def gestion_perfiles_riesgo(admin_id):
    print("\n[TODO] Gesti√≥n de perfiles de riesgo")
    input("Presiona Enter para volver al men√∫ principal...")

def alertas_masivas(admin_id):
    print("\n[TODO] Gesti√≥n de alertas masivas")
    input("Presiona Enter para volver al men√∫ principal...")

def configuracion_umbrales(admin_id):
    print("\n[TODO] Configuraci√≥n de umbrales de alerta")
    input("Presiona Enter para volver al men√∫ principal...")

def simulacion_fraude(admin_id):
    print("\n[TODO] Simulaci√≥n de fraude")
    input("Presiona Enter para volver al men√∫ principal...")

def gestion_bloqueos(admin_id):
    print("\n[TODO] Gesti√≥n de bloqueos autom√°ticos")
    input("Presiona Enter para volver al men√∫ principal...")

def aprobacion_transacciones(admin_id):
    print("\n[TODO] Aprobaci√≥n de transacciones de alto riesgo")
    input("Presiona Enter para volver al men√∫ principal...")

def cumplimiento_regulatorio(admin_id):
    print("\n[TODO] Panel de cumplimiento regulatorio")
    input("Presiona Enter para volver al men√∫ principal...")

def identificacion_patrones(admin_id):
    print("\n[TODO] Detecci√≥n de patrones emergentes (Dgraph)")
    input("Presiona Enter para volver al men√∫ principal...")

def anomalias_geograficas(admin_id):
    print("\n[TODO] Visualizaci√≥n de anomal√≠as geogr√°ficas")
    input("Presiona Enter para volver al men√∫ principal...")

def respuesta_incidentes(admin_id):
    print("\n[TODO] Respuesta a incidentes")
    input("Presiona Enter para volver al men√∫ principal...")

def verificacion_identidad(admin_id):
    print("\n[TODO] Gesti√≥n de verificaci√≥n de identidad")
    input("Presiona Enter para volver al men√∫ principal...")

def analisis_administradores(admin_id):
    print("\n[TODO] An√°lisis de comportamiento de administradores")
    input("Presiona Enter para volver al men√∫ principal...")

def integracion_sistemas_externos(admin_id):
    print("\n[TODO] Integraci√≥n con sistemas externos de fraude")
    input("Presiona Enter para volver al men√∫ principal...")
